// Hatchak keyboard layout

// I have put all sorts of symbols in L3/L4, etc, but I may want to put in some unicode
// ones later... mostly for math symbols.  Although I really don't know when I would
// use them.


xkb_symbols "hatchak" {

    name[Group1]= "Hatchak-g1";


// Mod key assignment:
    // L3 Shift, being most important after shift, is on Mod5 because
    // some QT bug eats it if it's on anything else.
    // Alt and Super are on Mods 1 and 4 respectively, because that's their
    // normal placement.
    modifier_map Mod1    { Alt_L, Alt_R };
    modifier_map Mod5    { ISO_Level3_Shift };
    modifier_map Mod3    { ISO_Level5_Shift };
    modifier_map Mod4    { Super_L, Super_R };
    modifier_map Mod2    { Hyper_L, Hyper_R };
    modifier_map Shift   { Shift_L, Shift_R };
    modifier_map Control { Control_L, Control_R };
    modifier_map Lock    { Caps_Lock };




// Most keys are eight level type
    key.type = "EIGHT_LEVEL_SEMIALPHABETIC";

    key <ESC>  { type="ONE_LEVEL", [ Escape ] };

// Number Row
    key <TLDE> { type="ONE_LEVEL", [ Caps_Lock ] };
    key <AE01> { type="ONE_LEVEL", [ Hyper_L ] };
    key <AE02> { type="ONE_LEVEL", [ Super_L ] };
    key <AE03> { [ Tab, ISO_Left_Tab ], 
                 [], 
                 [], 
                 [] };
    key <AE04> { [ equal, dollar, notequal, cent, EuroSign, sterling, yen ], 
                 [], 
                 [], 
                 [] };
    key <AE05> { [ semicolon, infinity, Greek_lamda ], 
                 [], 
                 [], 
                 [] };
    key <AE06> { [ colon, ellipsis, paragraph, section ], 
                 [], 
                 [], 
                 [] };
    key <AE07> { [ backslash, degree, trademark, registered, copyright ], 
                 [], 
                 [], 
                 [] };
    key <AE08> { [ slash, ISO_Group_Latch, division, multiply ],
                 [], 
                 [], 
                 [] };
                    // Triangles can be used as paren types
    key <AE09> { [ parenleft, Multi_key, U25F8, U25FA, U25E4, U25E3 ],
                 [], 
                 [], 
                 [] };
    key <AE10> { [ parenright, dead_acute, U25F9, U25FF, U25E5, U25E2 ],
                 [], 
                 [], 
                 [] };
    key <AE11> { type="ONE_LEVEL", [ Super_R ] };
    key <AE12> { type="ONE_LEVEL", [ Hyper_R ] };
    key <BKSP> { [ BackSpace, BackSpace, Delete ] };

// Upper Row
    key <TAB>  { type="ONE_LEVEL", [ Alt_L ] };
    key <AD01> { type="ONE_LEVEL", [ Control_L ] };
    key <AD02> { [ minus, underscore, bar, brokenbar ], 
                 [], 
                 [], 
                 [] };
    key <AD03> { [ period, question, comma, questiondown ], 
                 [], 
                 [], 
                 [] };
    key <AD04> { [ p, P, less ], 
                 [ Greek_pi, Greek_PI ], 
                 [], 
                 [] };
    key <AD05> { [ y, Y, greater ], 
                 [ Greek_upsilon, Greek_UPSILON ], 
                 [], 
                 [] };
    key <AD06> { [ f, F, asciicircum, NoSymbol, NoSymbol, F12 ], 
                 [ Greek_phi, Greek_PHI ], 
                 [], 
                 [] };
    key <AD07> { [ g, G, 7, NoSymbol, ISO_Group_Latch, F7 ], 
                 [ Greek_gamma, Greek_GAMMA ], 
                 [], 
                 [] };
    key <AD08> { [ c, C, 8, NoSymbol, Home, F8 ], 
                 [ Greek_xi, Greek_XI ], 
                 [], 
                 [] };
    key <AD09> { [ r, R, 9, NoSymbol, End, F9 ], 
                 [ Greek_rho, Greek_RHO ], 
                 [], 
                 [] };
    key <AD10> { [ l, L, asciitilde, notsign, Prior, F15 ], // Prior is pageup
                 [ Greek_lamda, Greek_LAMDA ], 
                 [], 
                 [] };
    key <AD11> { type="ONE_LEVEL", [ Control_R ] };
    key <AD12> { type="ONE_LEVEL", [ Alt_R ] };
    // The backslash key should be bound to an input method program for inputting arbitrary unicode.
    // Nobody will ever launch DOS with a key, so I'll appropriate it.
    key <BKSL> { type="ONE_LEVEL", [ XF86DOS ] };

// Home Row
    key <CAPS> { type="ONE_LEVEL", [ ISO_Level3_Shift ] };
                            // U2039=‹ (single left guillemet), guillemotleft=«
    key <AC01> { [ a, A, braceleft, guillemotleft, U2039 ],
                 [ Greek_alpha, Greek_ALPHA ], 
                 [], 
                 [] };
                            // U203A=› (single right guillemet), guillemotright=»
    key <AC02> { [ o, O, braceright, guillemotright, U203A ],
                 [ Greek_omicron, Greek_OMICRON ], 
                 [], 
                 [] };
                            // U201C and U2018 are double and single left quotes: “‘
                            // U300C=「 (left CJK quote), U300E=『 (left CJK doublequote)
                            // U300C and U300E are both fullwidth.
                            // UFF62=halfwidth version U300C,
    key <AC03> { [ e, E, bracketleft, U201C, U2018 ],
                 [ Greek_epsilon, Greek_EPSILON ], 
                 [], 
                 [] };
                            // U201D and U2019 are double and single right quotes: ”’
                            // U300D=」 (right CJK quote), U300F=』 (right CJK doublequote)
                            // U300D and U300F are both fullwidth.
                            // UFF63=halfwidth version U300D,
    key <AC04> { [ u, U, bracketright, U201D, U2019 ],
                 [ Greek_omega, Greek_OMEGA ], 
                 [], 
                 [] };
    key <AC05> { [ i, I, exclam, exclamdown ], 
                 [ Greek_iota, Greek_IOTA ], 
                 [], 
                 [] };
    key <AC06> { [ d, D, asterisk, enfilledcircbullet, Left, F11, leftarrow ], 
                 [ Greek_delta, Greek_DELTA ], 
                 [], 
                 [] };
                 // Bag parens are U27C5 and U27C6
    key <AC07> { [ h, H, 4, U27C5, Down, F4, downarrow ], 
                 [ Greek_theta, Greek_THETA ], 
                 [], 
                 [] };
    key <AC08> { [ t, T, 5, U27C6, Up, F5, uparrow ], 
                 [ Greek_tau, Greek_TAU ], 
                 [], 
                 [] };
    key <AC09> { [ n, N, 6, NoSymbol, Right, F6, rightarrow ], 
                 [ Greek_nu, Greek_NU ], 
                 [], 
                 [] };
    key <AC10> { [ s, S, plus, plusminus, Next, F14 ], // Next is pagedown
                 [ Greek_sigma, Greek_SIGMA ], 
                 [], 
                 [] };
    key <AC11> { type="ONE_LEVEL", [ ISO_Level3_Shift ] };
    key <RTRN> { type="ONE_LEVEL", [ Return ] };

// Lower Row
    key <LFSH> { type="ONE_LEVEL", [ Shift_L ] };
    key <AB01> { [ apostrophe, quotedbl, grave ], 
                 [], 
                 [], 
                 [] };
    key <AB02> { [ q, Q, at ], 
                 [ Greek_psi, Greek_PSI ], 
                 [], 
                 [] };
    key <AB03> { [ j, J, numbersign ], 
                 [ Greek_eta, Greek_ETA ], 
                 [], 
                 [] };
    key <AB04> { [ k, K, Escape ], 
                 [ Greek_kappa, Greek_KAPPA ], 
                 [], 
                 [] };
    key <AB05> { [ x, X, ampersand ], 
                 [ Greek_chi, Greek_CHI ], 
                 [], 
                 [] };
    key <AB06> { [ b, B, 0, NoSymbol, NoSymbol, F10 ], 
                 [ Greek_beta, Greek_BETA ], 
                 [], 
                 [] };
    key <AB07> { [ m, M, 1, NoSymbol, NoSymbol, F1 ], 
                 [ Greek_mu, Greek_MU ], 
                 [], 
                 [] };
    key <AB08> { [ w, W, 2, NoSymbol, NoSymbol, F2 ], 
                 [], 
                 [], 
                 [] };
    key <AB09> { [ v, V, 3, NoSymbol, NoSymbol, F3 ], 
                 [], 
                 [], 
                 [] };
    key <AB10> { [ z, Z, percent, NoSymbol, Insert, F13 ], 
                 [ Greek_zeta, Greek_ZETA ], 
                 [], 
                 [] };
    key <RTSH> { type="ONE_LEVEL", [ Shift_R ] };

// Space Row
    key <LCTL> { type="ONE_LEVEL", [ ISO_Level5_Shift ] };
    //key <LWIN> { [] };
    key <LALT> { [ Alt_L ] }; // For VT-switching
    key <SPCE> { [ space, space, space, space ] };
    key <RALT> { [ Alt_R ] }; // For VT-switching
    //key <RWIN> { [] };
    //key <MENU> { [] };
    key <RCTL> { type="ONE_LEVEL", [ ISO_Level5_Shift ] };

// I've put the numbers as the base of the number pad
// But maybe I'll later want things like KP_Home, KP_Next, etc...

    // TODO - find a use for this.  I don't want numlock on my layout.  I've always disliked it.
    //key <NMLK> { [] };
    key <KPDV> { [ KP_Divide ] };
    key <KPMU> { [ KP_Multiply, asciicircum ] };
    key <KPSU> { [ KP_Subtract, BackSpace ] };

    key <KP7>  { [ KP_7 ] };
    key <KP8>  { [ KP_8 ] };
    key <KP9>  { [ KP_9 ] };
    key <KPAD> { [ KP_Add ] };

    // Add some handy parens and E for using calculators
    key <KP4>  { [ KP_4, parenleft ] };
    key <KP5>  { [ KP_5, parenright ] };
    key <KP6>  { [ KP_6, E ] };

    key <KP1>  { [ KP_1 ] };
    key <KP2>  { [ KP_2 ] };
    key <KP3>  { [ KP_3 ] };
   
    key <KP0>  { [ KP_0, space ] };
    key <KPDL> { [ KP_Decimal ] };

    key <KPEN> { [ KP_Enter ] };



// Here are some of the keys outside of the main block... I don't know what
// I want to do with them yet.



    // The extra key on many European keyboards:
    //key <LSGT> { [ less, greater, bar, brokenbar ] };


    key <OUTP> { [ XF86Display ] };
    key <KITG> { [ XF86KbdLightOnOff ] };
    key <KIDN> { [ XF86KbdBrightnessDown ] };
    key <KIUP> { [ XF86KbdBrightnessUp ] };



    key <PRSC> {
       type= "PC_ALT_LEVEL2",
       symbols[Group1]= [ Print, Sys_Req ]
    };
    key <SCLK> { [  Scroll_Lock ] };
    key <PAUS> {
       type= "PC_CONTROL_LEVEL2",
       symbols[Group1]= [ Pause, Break ]
    };
    key <INS>  { [  Insert  ] };
    key <HOME> { [  Home    ] };
    key <PGUP> { [  Prior   ] };
    key <DELE> { [  Delete  ] };
    key <END>  { [  End     ] };
    key <PGDN> { [  Next    ] };

    key <UP>   { [  Up      ] };
    key <LEFT> { [  Left    ] };
    key <DOWN> { [  Down    ] };
    key <RGHT> { [  Right   ] };



// Function Keys, which I don't personally care about except
// for VT switching.  The combos for VT switching are mapped
// so they're on the same keys as the VT switchers in qwerty.
    key <FK01> {
       type="Hatchak_VT",
       symbols[Group1]= [ F1, F1, XF86_Switch_VT_1, XF86_Switch_VT_1, XF86_Switch_VT_1, XF86_Switch_VT_1 ]
    };

    key <FK02> {
       type="Hatchak_VT",
       symbols[Group1]= [ F2, F2, XF86_Switch_VT_2, XF86_Switch_VT_2, XF86_Switch_VT_2, XF86_Switch_VT_2 ]
    };

    key <FK03> {
       type="Hatchak_VT",
       symbols[Group1]= [ F3, F3, XF86_Switch_VT_3, XF86_Switch_VT_3, XF86_Switch_VT_3, XF86_Switch_VT_3 ]
    };

    key <FK04> {
       type="Hatchak_VT",
       symbols[Group1]= [ F4, F4, XF86_Switch_VT_4, XF86_Switch_VT_4, XF86_Switch_VT_4, XF86_Switch_VT_4 ]
    };

    key <FK05> {
       type="Hatchak_VT",
       symbols[Group1]= [ F5, F5, XF86_Switch_VT_5, XF86_Switch_VT_5, XF86_Switch_VT_5, XF86_Switch_VT_5 ]
    };

    key <FK06> {
       type="Hatchak_VT",
       symbols[Group1]= [ F6, F6, XF86_Switch_VT_6, XF86_Switch_VT_6, XF86_Switch_VT_6, XF86_Switch_VT_6 ]
    };

    key <FK07> {
       type="Hatchak_VT",
       symbols[Group1]= [ F7, F7, XF86_Switch_VT_7, XF86_Switch_VT_7, XF86_Switch_VT_7, XF86_Switch_VT_7 ]
    };

    key <FK08> {
       type="Hatchak_VT",
       symbols[Group1]= [ F8, F8, XF86_Switch_VT_8, XF86_Switch_VT_8, XF86_Switch_VT_8, XF86_Switch_VT_8 ]
    };

    key <FK09> {
       type="Hatchak_VT",
       symbols[Group1]= [ F9, F9, XF86_Switch_VT_9, XF86_Switch_VT_9, XF86_Switch_VT_9, XF86_Switch_VT_9 ]
    };

    key <FK10> {
       type="Hatchak_VT",
       symbols[Group1]= [ F10, F10, XF86_Switch_VT_10, XF86_Switch_VT_10, XF86_Switch_VT_10, XF86_Switch_VT_10 ]
    };

    key <FK11> {
       type="Hatchak_VT",
       symbols[Group1]= [ F11, F11, XF86_Switch_VT_11, XF86_Switch_VT_11, XF86_Switch_VT_11, XF86_Switch_VT_11 ]
    };

    key <FK12> {
       type="Hatchak_VT",
       symbols[Group1]= [ F12, F12, XF86_Switch_VT_12, XF86_Switch_VT_12, XF86_Switch_VT_12, XF86_Switch_VT_12 ]
    };

};


